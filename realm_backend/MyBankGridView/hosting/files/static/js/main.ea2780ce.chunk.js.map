{"version":3,"sources":["RealmApp.js","Components/Container.js","Components/Loading.js","Containers/LoginScreen.js","Containers/GoogleLogin.js","Containers/GridOptions.js","lib/graphql/ApolloClientWrapper.js","Containers/Grid.js","lib/graphql/gridDatasource.js","lib/azure/authConfig.js","lib/graphql/apolloClient.js","App.js","index.js"],"names":["RealmAppContext","React","createContext","useRealmApp","app","useContext","Error","RealmAppProvider","appId","children","useState","Realm","setApp","useEffect","currentUser","setCurrentUser","credentials","a","jwt","logIn","google","logOut","wrapped","logInJwt","logInGoogle","Provider","value","Container","styled","div","uiColors","gray","light2","Loading","size","margin","color","dark2","LoginScreen","email","setEmail","password","setPassword","error","setError","isLoggingIn","setIsLoggingIn","useMsal","instance","accounts","handleLogin","e","emailPassword","handleAuthenticationError","handleSSOLogin","acquireTokenPopup","scopes","process","account","JSON","stringify","accessToken","slice","console","log","handleSSOGoogleLogin","err","parts","message","split","reason","length","trimStart","status","reasonRegex","match","groups","parseAuthenticationError","errorType","prevErr","LoginFormRow","LoginHeading","type","label","onChange","target","errorMessage","state","variant","onClick","h1","GoogleLogin","handleAuthRedirect","columnTypes","detail","enableRowGroup","enablePivot","dimension","valueColumn","aggFunc","defaultColDef","sortable","resizable","rowSelection","rowModelType","serverSideStoreType","cacheBlockSize","rowGroupPanelShow","groupDisplayType","onSortChanged","params","api","refreshServerSideStore","purge","clientProvider","WrappedComponent","props","ApolloConsumer","client","formatCurrency","Intl","NumberFormat","style","currency","format","ApolloClientWrapper","columnDefs","field","colId","valueGetter","rowGroup","hide","valueFormatter","cellClassRules","gridOptions","Object","assign","GridOptions","datasource","getRows","request","startRow","endRow","rowGroupCols","groupKeys","valueCols","sortModel","map","model","sort","toUpperCase","query","gql","variables","then","res","data","getGridData","lastRow","rows","successCallback","catch","failCallback","createServerSideDatasource","totalRows","setTotalRows","height","className","onGridReady","sizeColumnsToFit","setServerSideDatasource","onModelUpdated","getDisplayedRowCount","id","providerType","msalConfig","auth","clientId","authority","redirectUri","postLogoutRedirectUri","mainWindowRedirectUri","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","containsPii","LogLevel","Info","info","Verbose","debug","Warning","warn","createRealmApolloClient","link","HttpLink","uri","fetch","options","refreshCustomData","headers","Authorization","InMemoryCache","ApolloClient","RealmApolloProvider","setClient","ApolloProvider","msalInstance","PublicClientApplication","RequireLoggedInUser","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea2780ce.chunk.js","sourcesContent":["import React from \"react\";\nimport * as Realm from \"realm-web\";\n\nconst RealmAppContext = React.createContext();\n\nexport const useRealmApp = () => {\n    const app = React.useContext(RealmAppContext);\n    if (!app) {\n        throw new Error (\n            `You must call useRealmApp() inside of a <RealmAppProvider />`\n        );\n    }\n    return app;\n}\n\nexport const RealmAppProvider = ({ appId, children }) => {\n    const [app, setApp] = React.useState(new Realm.App(appId));\n    React.useEffect(() => {\n        setApp(new Realm.App(appId));\n    }, [appId]);\n\n    // Wrap the Realm.App object's user state with React state\n    const [currentUser, setCurrentUser] = React.useState(app.currentUser);\n\n    async function logInJwt(credentials) {\n        const jwt = Realm.Credentials.jwt(credentials);\n        await app.logIn(jwt);\n        // If successful, app.currentUser is the user that just logged in\n        setCurrentUser(app.currentUser);\n    }\n\n    async function logInGoogle() {\n        await app.logIn(Realm.Credentials.google(\"https://mybankgridview-ahggo.mongodbstitch.com/google_login\"));\n        setCurrentUser(app.currentUser);\n    }\n\n    async function logIn(credentials) {\n        await app.logIn(credentials);\n        // If successful, app.currentUser is the user that just logged in\n        setCurrentUser(app.currentUser);\n    }\n\n    async function logOut() {\n        // Log out the currrently active user\n        await app.currentUser?.logOut();\n        // If another user was logged in too, they're now the current user.\n        // Otherwise, app.currentUser is null.\n        setCurrentUser(app.currentUser);\n    }\n\n    const wrapped = { ...app, currentUser, logIn, logInJwt, logInGoogle, logOut };\n\n    return (\n        <RealmAppContext.Provider value={wrapped}>\n            {children}\n        </RealmAppContext.Provider>\n    );\n};","import styled from \"@emotion/styled\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\n\nconst Container = styled.div`\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  background: ${uiColors.gray.light2};\n`;\n\nexport default Container;","import React from \"react\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\nimport GridLoader from \"react-spinners/GridLoader\";\n\nexport default function Loading() {\n  return <GridLoader size=\"15px\" margin=\"3px\" color={uiColors.gray.dark2} />;\n}\n","import React from \"react\";\nimport * as Realm from \"realm-web\";\nimport styled from \"@emotion/styled\";\nimport TextInput from \"@leafygreen-ui/text-input\";\nimport Button from \"@leafygreen-ui/button\";\nimport { uiColors } from \"@leafygreen-ui/palette\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { GoogleLoginButton, MicrosoftLoginButton } from \"react-social-login-buttons\";\n\nimport { useRealmApp } from \"../RealmApp\";\nimport Container from \"../Components/Container\";\nimport Loading from \"../Components/Loading\";\n\n\n\nconst LoginScreen = () => {\n    const app = useRealmApp();\n    const [email, setEmail] = React.useState(\"\");\n    const [password, setPassword] = React.useState(\"\");\n    const [error, setError] = React.useState({});\n    const [isLoggingIn, setIsLoggingIn] = React.useState(false);\n    const { instance, accounts } = useMsal();\n\n    const handleLogin = async () => {\n        setIsLoggingIn(true);\n        setError((e) => ({ ...e, password: null }));\n        try {\n            await app.logIn(Realm.Credentials.emailPassword(email, password));\n        } catch (err) {\n            handleAuthenticationError(err, setError)\n            setIsLoggingIn(false);\n        }\n    }\n    \n    const handleSSOLogin = async () => {\n        try {\n            //setIsLoggingIn(true);\n\n            let jwt = await instance.acquireTokenPopup({\n                scopes: [`${process.env.REACT_APP_APPID}/.default`],\n                account: accounts[0]\n            });\n    \n            jwt = await JSON.stringify(jwt.accessToken).slice(1,-1);\n            await app.logInJwt(jwt);\n        } catch (err) {\n            console.log(err);\n            handleAuthenticationError(err, setError);\n        }\n    }\n\n    const handleSSOGoogleLogin = async () => {\n        try {\n            await app.logInGoogle();\n        } catch (err) {\n            console.log(err);\n            handleAuthenticationError(err, setError);\n        }\n    }\n\n    const handleAuthenticationError = (err, setError) => {\n        const { status, message } = parseAuthenticationError(err);\n        const errorType = message || status;\n        console.log(errorType);\n        switch (errorType) {\n            case \"invalid username\":\n                setError((prevErr) => ({ ...prevErr, email: \"Invalid email address\"}));\n                break;\n            case \"invalid username/password\":\n            case \"invalid password\":\n            case \"401\":\n                setError((err) => ({ ...err, password: \"Incorrect password\"}));\n                break;\n            default:\n                break;\n        }\n    }\n\n    return (\n        <Container>\n            {isLoggingIn ? (\n                <Loading />\n            ) : (\n                <>\n                <LoginFormRow>\n                    <LoginHeading>Please identify</LoginHeading>\n                </LoginFormRow>\n                <LoginFormRow>\n                    <TextInput \n                        type=\"email\" \n                        label=\"Email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        errorMessage={error.email}\n                        state={error.email ? \"error\" : \"none\"}\n                    />\n                </LoginFormRow>\n                <LoginFormRow>\n                    <TextInput \n                        type=\"password\" \n                        label=\"Password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        errorMessage={error.password}\n                        state={error.password ? \"error\" : \"none\" }\n                    />\n                </LoginFormRow> \n                <LoginFormRow>\n                    <Button variant=\"primary\" onClick={() => handleLogin()}>Login</Button>\n                </LoginFormRow>           \n                <LoginFormRow>\n                    <MicrosoftLoginButton onClick={() => handleSSOLogin()} />\n                </LoginFormRow>\n                <LoginFormRow>\n                    <GoogleLoginButton onClick={() => handleSSOGoogleLogin()} />\n                </LoginFormRow>\n                </>\n            )}\n        </Container>\n    )\n}\n\nexport default LoginScreen;\n\nfunction parseAuthenticationError(err) {\n    const parts = err.message.split(\":\");\n    const reason = parts[parts.length - 1].trimStart();\n    if (!reason) return { status: \"\", message: \"\" };\n    const reasonRegex = /(?<message>.+)\\s\\(status (?<status>[0-9][0-9][0-9])/;\n    const match = reason.match(reasonRegex);\n    const { status, message } = match?.groups ?? {};\n    return { status, message };\n}\n\nconst LoginHeading = styled.h1`\n  margin: 0;\n  font-size: 32px;\n`;\n\nconst LoginFormRow = styled.div`\n  margin-bottom: 16px;\n`;","import React, { useEffect } from \"react\";\nimport { handleAuthRedirect } from \"realm-web\";\n\nconst GoogleLogin = () => {\n    useEffect(() => {\n        handleAuthRedirect();\n    })\n    return (\n        <h1>Signing in... Please Wait</h1>\n    )\n}\n\nexport default GoogleLogin;","const columnTypes = {\n    detail: {\n        enableRowGroup: false,\n        enablePivot: false\n    },\n    dimension: {\n        enableRowGroup: true,\n        enablePivot: true\n    },\n    valueColumn: {\n        aggFunc: \"sum\",\n    }\n};\n\nconst sideBar = {\n    toolPanels: [\n        {\n            id: \"columns\",\n            labelDefault: \"Columns\",\n            toolPanel: \"agColumnsToolPanel\"\n        }\n    ]\n}\n\nconst rowGroupPanelShow = \"always\";\n\nconst groupDisplayType = \"multipleColumns\";\n\nconst defaultColDef = {\n    sortable: true,\n    resizable: true\n}\n\nconst onSortChanged = (params) => {\n    params.api.refreshServerSideStore({purge: true});\n}\n\nconst rowSelection = \"single\";\nconst rowModelType = \"serverSide\";\nconst serverSideStoreType = \"partial\";\nconst cacheBlockSize = 100;\n\nexport default {\n    columnTypes,\n    defaultColDef,\n    rowSelection,\n    rowModelType,\n    serverSideStoreType,\n    cacheBlockSize,\n    rowGroupPanelShow,\n    groupDisplayType,\n    onSortChanged\n    //sideBar\n}","import { ApolloConsumer } from \"@apollo/client\";\n\nconst clientProvider = WrappedComponent => {\n    return props => (\n      <ApolloConsumer>\n        {client => {\n          return <WrappedComponent client={client} {...props} />\n        }}\n      </ApolloConsumer>\n    )\n  }\n  \nexport default clientProvider;","import React from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport Button from \"@leafygreen-ui/button\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport \"ag-grid-enterprise\";\n\nimport GridOptions from './GridOptions';\nimport ApolloClientWrapper from '../lib/graphql/ApolloClientWrapper';\nimport { createServerSideDatasource } from \"../lib/graphql/gridDatasource\";\nimport Container from \"../Components/Container\";\nimport { useRealmApp } from \"../RealmApp\";\n\nconst formatCurrency = (params) => {\n    return new Intl.NumberFormat('de-DE', {style: 'currency', currency: 'EUR'}).format(params.value);\n}\n\nconst formatNumber = (value) => {\n    return new Intl.NumberFormat('de-DE').format(value);\n}\n\n\nconst Grid = ({ client }) => {\n    const app = useRealmApp();\n\n    const columnDefs = [\n        { \n            field: \"customer\",\n            colId: \"customerId\",\n            valueGetter: \"data.customerId\",\n            type: \"dimension\",\n            rowGroup: true,\n            hide: true\n        },\n        { field: \"lastName\", type: \"detail\" },\n        { field: \"firstName\", type: \"detail\" },\n        { field: \"age\", type: \"dimension\" },\n        { field: \"country\", colId: \"address.country\", type: \"dimension\", valueGetter: \"data.address.country\"},\n        { field: \"segment\", colId: \"crmInformation.segmentation\", type: \"dimension\", valueGetter: \"data.crmInformation.segmentation\"},\n        { field: \"account\", colId: \"accounts.number\", valueGetter: \"data.accounts.number\"},\n        { \n            field: \"balance\", \n            colId: \"accounts.balance\",\n            valueGetter: \"data.accounts.balance\", \n            valueFormatter: formatCurrency,\n            type: \"valueColumn\",\n            cellClassRules: {\n                \"rag-red\": params => params.value <= 0,\n                \"rag-green\": params => params.value > 0\n            }\n        }\n    ]\n\n    const gridOptions = Object.assign(GridOptions, {columnDefs});\n    const datasource = createServerSideDatasource({client});\n\n    const [totalRows, setTotalRows] = React.useState(0);\n\n    const onGridReady = (params) => {\n        params.api.sizeColumnsToFit();\n        params.api.setServerSideDatasource(datasource);\n    }\n\n    const onModelUpdate = (params) => {\n        setTotalRows(params.api.getDisplayedRowCount());\n    }\n\n    return (\n        <>\n        <div         \n            style={{ height: \"calc(100vh - 250px)\" }}\n            className=\"ag-theme-alpine\"\n        >\n            <AgGridReact\n                gridOptions={gridOptions}\n                onGridReady={onGridReady}\n                onModelUpdated={onModelUpdate}\n            />\n        </div>\n        <h4>{`Total Results: ${formatNumber(totalRows)}`}</h4>\n        <h4>User: {app.currentUser.id ? `${app.currentUser.id} (${app.currentUser.providerType})` : \"not logged in\"}</h4>\n        <Button variant=\"primary\" onClick={() => app.logOut()}>Logout</Button>\n        </>\n    )\n}\n\nexport default ApolloClientWrapper(Grid);","import { gql } from \"@apollo/client\";\n\nexport const createServerSideDatasource = ({ client }) => {\n    return {\n        getRows: (params) => {\n            console.log(params);\n            //console.log(params.columnApi.getAllDisplayedColumns().map(col => col.getColId()).filter(colName => colName !== \"ag-Grid-AutoColumn\"));\n            const { startRow, endRow, rowGroupCols, groupKeys, valueCols, sortModel } = params.request;\n            sortModel.map(model => model.sort = model.sort.toUpperCase());\n\n            const customerGroup = `\n            accounts {\n                number\n                balance\n            `;\n\n            const allGroups = `\n            customerId\n            lastName\n            firstName\n            age\n            address {\n                country\n            }\n            crmInformation {\n                segmentation\n            }\n            accounts {\n                number\n                balance\n            `;\n\n            const query = { \n                query: gql`\n                    query getGridData($queryModelInput:GridQueryModel) {\n                        getGridData(input: $queryModelInput) {\n                            lastRow\n                            rows {\n                                ${rowGroupCols.length > 0 && rowGroupCols.length === groupKeys.length ? customerGroup : allGroups}\n                            }\n                        }\n                    }\n                }\n                `,\n                variables: {\n                    \"queryModelInput\" : {\n                        startRow,\n                        endRow,\n                        rowGroupCols,\n                        groupKeys,\n                        valueCols,\n                        sortModel\n                    }\n                }\n            };\n\n            client.query(query)\n            .then(res => res.data.getGridData)\n            .then(({ lastRow, rows }) => {\n                params.successCallback(rows, lastRow)\n            })\n            .catch(err => {\n                console.error(err);\n                params.failCallback();\n            })\n        }\n    }\n}","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { LogLevel } from \"@azure/msal-browser\";\n\n/**\n * Configuration object to be passed to MSAL instance on creation. \n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md \n */\nexport const msalConfig = {\n    auth: {\n        clientId: process.env.REACT_APP_APPID,\n        authority: `https://login.microsoftonline.com/${process.env.REACT_APP_TENANTID}`,\n        redirectUri: \"https://mybankgridview-ahggo.mongodbstitch.com/\",\n        postLogoutRedirectUri: \"https://mybankgridview-ahggo.mongodbstitch.com/\",\n        mainWindowRedirectUri: \"https://mybankgridview-ahggo.mongodbstitch.com/\"\n    },\n    cache: {\n        cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n    },\n    system: {\t\n        loggerOptions: {\t\n            loggerCallback: (level, message, containsPii) => {\t\n                if (containsPii) {\t\t\n                    return;\t\t\n                }\t\t\n                switch (level) {\t\t\n                    case LogLevel.Error:\t\t\n                        console.error(message);\t\t\n                        return;\t\t\n                    case LogLevel.Info:\t\t\n                        console.info(message);\t\t\n                        return;\t\t\n                    case LogLevel.Verbose:\t\t\n                        console.debug(message);\t\t\n                        return;\t\t\n                    case LogLevel.Warning:\t\t\n                        console.warn(message);\t\t\n                        return;\t\t\n                }\t\n            }\t\n        }\t\n    }\n};\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit: \n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n */\nexport const loginRequest = {\n    scopes: [\"User.Read\"]\n};\n\n/**\n * Add here the scopes to request when obtaining an access token for MS Graph API. For more information, see:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md\n */\nexport const graphConfig = {\n    graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\"\n};\n","import React from \"react\";\nimport { useRealmApp } from \"../../RealmApp\";\nimport { ApolloClient, HttpLink, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nconst createRealmApolloClient = (app) => {\n    const link = new HttpLink({\n        uri: `https://eu-central-1.aws.realm.mongodb.com/api/client/v2.0/app/${app.id}/graphql`,\n        fetch: async (uri, options) => {\n            if (!app.currentUser) {\n                throw new Error(\"Must be logged in to use the GraphQL API\");\n            }\n            // Refreshing a user's custom data also refreshes their access token\n            await app.currentUser.refreshCustomData();\n            // The handler adds a bearer token Auth header to the otherwise unchanged request\n            console.log(app.currentUser);\n            options.headers.Authorization = `Bearer ${app.currentUser.accessToken}`;\n            return fetch(uri, options);\n        }\n    });\n\n    const cache = new InMemoryCache();\n\n    return new ApolloClient({ link, cache });\n}\n\nconst RealmApolloProvider = ({ children }) => {\n    const app = useRealmApp();\n    const [client, setClient] = React.useState(createRealmApolloClient(app));\n\n    React.useEffect(() => {\n        setClient(createRealmApolloClient(app));\n    }, [app]);\n    return <ApolloProvider client={client}>{children}</ApolloProvider>\n}\n\nexport default RealmApolloProvider;","import React from \"react\";\nimport { RealmAppProvider, useRealmApp } from \"./RealmApp\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\n\nimport LoginScreen from \"./Containers/LoginScreen\";\nimport GoogleLogin from \"./Containers/GoogleLogin\";\nimport Grid from \"./Containers/Grid\";\nimport { msalConfig } from \"./lib/azure/authConfig\";\nimport RealmApolloProvider from \"./lib/graphql/apolloClient\";\n\nconst APP_ID = process.env.REACT_APP_REALMAPP;\nconst msalInstance = new PublicClientApplication(msalConfig);\n\nconst RequireLoggedInUser = ({ children }) => {\n  // Only render children if there is a logged in user.\n  const app = useRealmApp();\n  return app.currentUser ? children : <LoginScreen />;\n};\n\nconst App = () => {\n  return (\n    <RealmAppProvider appId={APP_ID}>\n      <MsalProvider instance={msalInstance}>\n        <BrowserRouter>\n            <Routes>\n            <Route path=\"/google_login\" element={<GoogleLogin />} />\n            <Route path=\"/\" element={\n              <RequireLoggedInUser>\n                <RealmApolloProvider>\n                  <Grid />\n              </RealmApolloProvider>\n            </RequireLoggedInUser>\n            } />\n          </Routes>\n        </BrowserRouter>\n      </MsalProvider>\n    </RealmAppProvider>\n\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}